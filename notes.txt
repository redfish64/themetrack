We have a python parser for each filetype, ib, schwab, capex

We have a directory of files to load to produce a result.
We may in the future allow api driven access to data, and this could be saved to a directory if the user wants

There are two main functions:
1. Populate the data directory. This includes override rules, forex data, brokerage reports, and capex reports.
2. Process the data directory to a result directory, which includes debugging files, associations between rows in 
holdings and picks to override_rules, and an error/warning report. 

Note that we always start from the input data, because we don't want to have conditions like having to refresh the master of record, and then
produce reports as two separate steps. It's confusing.

We will end up with a few classes:
Holding - a position that is held by the account
Pick - a pick of a particular stock

Forex value date. This will be taken from the brokerage report date. Since the brokerage report also 
displays the current value, then, it only makes sense that we convert the currency on that date. 
If we took the current value indepedently, from the web or something, then it may make more sense
to use a different date.

We start with a "snapshot". A snapshot has 2 subdirs as above, data, and reports. A config/override file is in the main directory

First the user runs:

$ theme_track.py create_snapshot
Snapshot created at C:\theme_track\2024-05-24

This will create the new directory, and place theme_track_config.xlsx
By default this will be copied from the last theme_track report or a hardcoded one somewhere (how to do this with pyinstaller?)

Then they fill it up with reports from their brokerage(s). Then they login to capexinsider.com and run:
$ theme_track.py scrape_capex chrome
Read capex snapshot

Finally they run:
$ theme_track.py create_report

which will run the report and popup excel for them (or libreoffice). Popping up libreoffice or excel will be a configurable option.
If they need to adjust the custom rules, etc. they can do so and rerun create_report


We have a separate system_rules and custom rules. We do this because if we release a new version, we want to be able to update the 
system_rules as well. Otherwise, the old system rules will be copied over with the regular config when a new snapshot is created.


---

Reports:

Ideas:

One issue is that you want to cover the theme. If you have 0% in a particular stock that you are invested in for a theme
you'd want to fill it, for skeleton and total portfolio, at least, and probably divi, too. So it should be visible that you are 
missing stocks of a theme. 

Divi portfolio has Sector, which doesn't map exactly to a theme. 

So I think we have two reports categories. First is cap/skeleton, showing all values in a theme together, regardless if invested in or not.
Then we have a Theme report as normal
Second is divi, which uses Sector, not Theme as it's main category. Here we also have a "Sector" report.

The other issue is that sometimes picks overlap. skeleton stock BTU is also in Divi for example. So we need to display it as such
(skel/divi). This way the user is at aware of the issue, so they have less reason to be confused as if we just ignored one.









---

TODO 2: put capex and currency in separate directory. Add a notes sheet at the end indicating when each piece of data
was scraped.




TODO 2: picks report that includes holdings. This is useful for figuring out what other stocks may be part of a particular theme
ability to add or change columns used in reports, and even decide which reports to show.



----


n1, n2, n3, n4, n5

n1:
xxx: 1,2,3
yyy: 4,5

re:
(${a}foo,(6,7))

passthrough: 8,9

xxx
........
1 : {}
2 : {}
3 : {}
8 : {}
9 : {}

tryfoo
.........
6 : {a : 'try'}
7 : {a : 'try'}
8 : {}
9 : {}

n2:
aaa: 2,4
bbb: 5,6

2024/08/07

New idea to make it simpler:

The idea is that we want the report to allow us to see if we are implementing the newsletter category properly
that we chose. But also, we may want to take into account other things that we own that loosely fall into the
sector.

For each report type, we have a chosen category: asymmetric, skeleton, or dividend.

From there, we have stocks in that category and outside that category (but that may be in the same sector).
So for stocks in that category, we list them regardless if invested in or not.

For stocks outside that category, they get placed in an "other" sector.
The category/cat. sector(s) of each stock is clearly displayed in the other sector.

The user can then add rules, stating that for a chosen category, for example asymmetric,
that another category/cat. sector is the same thing as a sector within the category. In
this case it will still be displayed in an "other" section but that "other" section will
be immediately under the sector.

So there would be a rule, such as
Asymmetric Report:
* Skel/Oil Gas -> Oil

This would allow the user to see that they still have a lot invested in a particular sector,
but in stocks not directly within the particular category stocks themselves.


For cases where a holding stock isn't matched properly to a newsletter stock, we have
a rule called Match:
Brokerage: xxx
Exchange: yyy
Stock: zzz

Newsletter
Exchange: www
Stock: vvv


Finally we have a clear page which lists which holdings match which newsletter picks
(not the big mess of all columns we have now)


We get rid of the Replace rule, which can be used to implement the above internally.


-----

What about incorporating stock price changes, buys and sells. How to display this, first of all?

IRR internal rate of return
TWR time weighted return - divide into segments between each event, calculate gain/loss and multiply (1.00 + g)*(1.00 + g2)...
MWR money weighted return - involves calculating the IRR, I think we could do this as well.

---

I did some tests with tmr, and it seems ok. It does change a lot if you have big price swings, but only if 
dividends are also involved, since the price would dictate how much a dividend is worth.

